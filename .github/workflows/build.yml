name: Build OpenWrt with Custom Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build OpenWrt Image

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v3

    - name: Set up full build dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          gcc \
          g++ \
          gcc-multilib \
          g++-multilib \
          flex \
          bison \
          clang \
          gawk \
          gettext \
          git \
          libncurses-dev \
          libssl-dev \
          python3-distutils \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          libelf-dev \
          libc6-dev \
          libtool \
          autoconf \
          automake \
          cmake \
          pkg-config \
          libglib2.0-dev

    - name: Set up environment variables
      run: |
        echo "LD=ld" >> $GITHUB_ENV

    - name: Checkout OpenWrt buildroot
      uses: actions/checkout@v4
      with:
        repository: qosmio/openwrt-ipq
        path: openwrt
        fetch-depth: 0

    - name: Setup cache for OpenWrt toolchain and downloads
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl
          openwrt/staging_dir
        key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: Apply custom config and files
      run: |
        cd openwrt

        # Add custom files if available
        if [ -d ../custom/files ]; then
          cp -r ../custom/files/* files/
          if [ -d files/etc/profile.d ]; then
            chmod -R +x files/etc/profile.d/
          fi
        fi

        # Apply patches if any
        if [ -d ../custom/patches ]; then
          for patch in ../custom/patches/*.patch; do
            [ -f "$patch" ] && patch -p1 < "$patch"
          done
        fi

        git clone --branch master --no-tags --recurse-submodules https://github.com/fantastic-packages/packages.git package/fantastic_packages
        find package/fantastic_packages -type f -name Makefile -exec sed -i 's/+libc//g' {} \;

        ./scripts/feeds update -a
        ./scripts/feeds install -a

        cp ../config.seed .config
        make defconfig

    - name: Free up disk space before build
      run: |
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        df -h

    - name: Build firmware
      run: |
        cd openwrt
        make -j$(nproc) V=s

    - name: Debug step (TEMP)
      run: |
        cd openwrt/build_dir/target-*/root-*/etc/profile.d/
        ls -l

    - name: Upload firmware to Cloudflare R2
      id: upload-firmware
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_BUCKET: openwrt
        R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      run: |
        cd openwrt/bin/targets
        TARGET_DIR=$(find . -type f -name version.buildinfo -exec dirname {} \;)
        cd "$TARGET_DIR"
        VERSION=$(cat version.buildinfo | tr -d '\n')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        echo "Syncing to flush disk writes..."
        sync

        echo "Verifying SHA-256 checksums..."
        sha256sum -c sha256sums

        echo "All checks passed. Uploading to s3://$R2_BUCKET/mx4200v1/$VERSION/"
        aws --endpoint-url "$R2_ENDPOINT" s3 cp . "s3://$R2_BUCKET/mx4200v1/$VERSION/" --recursive --exclude "packages/*"


    - name: Notify Discord on success
      if: success()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        VERSION: ${{ steps.upload-firmware.outputs.version }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"# ✅ OpenWrt build succeeded!\n### Version: $VERSION\"}" $DISCORD_WEBHOOK_URL

    - name: Notify Discord on failure
      if: failure()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"# ❌ OpenWrt build failed!\n### Check the logs.\"}" $DISCORD_WEBHOOK_URL
