name: Build OpenWrt with Custom Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

jobs:
  build:
    runs-on: ubuntu-24.04
    name: Build OpenWrt Image

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v3

    - name: Set up dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file

    - name: Checkout OpenWrt buildroot
      uses: actions/checkout@v4
      with:
        repository: qosmio/openwrt-ipq
        path: openwrt
        fetch-depth: 1

    - name: Set up build environment
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Setup cache for OpenWrt toolchain and downloads
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl
          openwrt/staging_dir
        key: ${{ runner.os }}-openwrt-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: Add fantastic-packages repo
      run: |
        cd openwrt/package
        git clone --depth=1 https://github.com/fantastic-packages/packages fantastic

    - name: Apply custom config and files
      run: |
        cd openwrt
        cp ../config.seed .config
        make defconfig

        # Add custom files if available
        if [ -d ../custom/files ]; then
          cp -r ../custom/files/* files/
        fi

        # Apply patches if any
        if [ -d ../custom/patches ]; then
          for patch in ../custom/patches/*.patch; do
            [ -f "$patch" ] && patch -p1 < "$patch"
          done
        fi

    - name: Build firmware
      run: |
        cd openwrt
        make -j$(nproc)

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.R2_REGION }}

    - name: Upload firmware to Cloudflare R2
      id: upload-firmware
      env:
        R2_BUCKET: ${{ secrets.R2_BUCKET_NAME }}
        R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
      run: |
        cd openwrt/bin/targets
        TARGET_DIR=$(find . -type f -name version.buildinfo -exec dirname {} \;)
        VERSION=$(cat "$TARGET_DIR/version.buildinfo" | tr -d '\n')
        echo "::set-output name=version::$VERSION"
        echo "Uploading to s3://$R2_BUCKET/mx4200v1/$VERSION/"
        aws --endpoint-url "$R2_ENDPOINT" s3 cp "$TARGET_DIR" "s3://$R2_BUCKET/mx4200v1/$VERSION/" --recursive

    - name: Notify Discord on success
      if: success()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        VERSION: ${{ steps.upload-firmware.outputs.version }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"✅ OpenWrt build succeeded!\nVersion: $VERSION\"}" $DISCORD_WEBHOOK_URL

    - name: Notify Discord on failure
      if: failure()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"❌ OpenWrt build failed!\nCheck the logs.\"}" $DISCORD_WEBHOOK_URL
