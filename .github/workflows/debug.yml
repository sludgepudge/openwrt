name: Build Debugger

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build OpenWrt Image

    steps:
    - name: Checkout workflow repo
      uses: actions/checkout@v3

    - name: Set up full build dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          build-essential \
          gcc \
          g++ \
          gcc-multilib \
          g++-multilib \
          flex \
          bison \
          clang \
          gawk \
          gettext \
          git \
          libncurses-dev \
          libssl-dev \
          python3-distutils \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          libelf-dev \
          libc6-dev \
          libtool \
          autoconf \
          automake \
          cmake \
          pkg-config \
          libglib2.0-dev

    - name: Set up environment variables
      run: |
        echo "LD=ld" >> $GITHUB_ENV

    - name: Checkout OpenWrt buildroot
      uses: actions/checkout@v4
      with:
        repository: qosmio/openwrt-ipq
        path: openwrt
        fetch-depth: 0

    - name: Set up build environment
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Add fantastic-packages repo
      run: |
        cd openwrt/package
        git clone --depth=1 https://github.com/fantastic-packages/packages fantastic

    - name: Apply custom config and files
      run: |
        cd openwrt
        cp ../config.seed .config
        make defconfig

        # Add custom files if available
        if [ -d ../custom/files ]; then
          cp -r ../custom/files/* files/
        fi

        # Apply patches if any
        if [ -d ../custom/patches ]; then
          for patch in ../custom/patches/*.patch; do
            [ -f "$patch" ] && patch -p1 < "$patch"
          done
        fi

    - name: Build Env Debugging
      run: |
        git describe --long
        head -n5 .version

        ld --version
        gcc --version
        cat .config | grep ^CONFIG_USE_*
